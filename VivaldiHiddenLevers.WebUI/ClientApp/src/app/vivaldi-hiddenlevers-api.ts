/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.6.0 (NJsonSchema v10.0.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClientsClient {
    getAll(): Observable<ClientsListViewModel>;
    create(command: CreateClientCommand): Observable<void>;
    get(id: number): Observable<ClientDetailModel>;
}

@Injectable()
export class ClientsClient implements IClientsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:2735";
    }

    getAll(): Observable<ClientsListViewModel> {
        let url_ = this.baseUrl + "/api/Clients";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<ClientsListViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientsListViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<ClientsListViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientsListViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientsListViewModel>(<any>null);
    }

    create(command: CreateClientCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Clients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    get(id: number): Observable<ClientDetailModel> {
        let url_ = this.baseUrl + "/api/Clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ClientDetailModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<ClientDetailModel>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ClientDetailModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ClientDetailModel>(<any>null);
    }
}

export interface IRiskProfilesClient {
    getForClient(clientid: number): Observable<RiskProfileDetailModel>;
    create(command: CreateRiskProfileForClient): Observable<void>;
}

@Injectable()
export class RiskProfilesClient implements IRiskProfilesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:2735";
    }

    getForClient(clientid: number): Observable<RiskProfileDetailModel> {
        let url_ = this.baseUrl + "/api/RiskProfiles/{clientid}";
        if (clientid === undefined || clientid === null)
            throw new Error("The parameter 'clientid' must be defined.");
        url_ = url_.replace("{clientid}", encodeURIComponent("" + clientid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForClient(<any>response_);
                } catch (e) {
                    return <Observable<RiskProfileDetailModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<RiskProfileDetailModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetForClient(response: HttpResponseBase): Observable<RiskProfileDetailModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RiskProfileDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = NotFoundException.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RiskProfileDetailModel>(<any>null);
    }

    create(command: CreateRiskProfileForClient): Observable<void> {
        let url_ = this.baseUrl + "/api/RiskProfiles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export interface IStressTestsClient {
    getForClient(clientid: number): Observable<StressTestDetailModel>;
    create(command: CreateStressTestForClient): Observable<void>;
}

@Injectable()
export class StressTestsClient implements IStressTestsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:2735";
    }

    getForClient(clientid: number): Observable<StressTestDetailModel> {
        let url_ = this.baseUrl + "/api/StressTests/{clientid}";
        if (clientid === undefined || clientid === null)
            throw new Error("The parameter 'clientid' must be defined.");
        url_ = url_.replace("{clientid}", encodeURIComponent("" + clientid)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForClient(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForClient(<any>response_);
                } catch (e) {
                    return <Observable<StressTestDetailModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<StressTestDetailModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetForClient(response: HttpResponseBase): Observable<StressTestDetailModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StressTestDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = NotFoundException.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<StressTestDetailModel>(<any>null);
    }

    create(command: CreateStressTestForClient): Observable<void> {
        let url_ = this.baseUrl + "/api/StressTests";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ClientsListViewModel implements IClientsListViewModel {
    clients?: ClientLookupModel[] | undefined;

    constructor(data?: IClientsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["clients"])) {
                this.clients = [] as any;
                for (let item of data["clients"])
                    this.clients!.push(ClientLookupModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new ClientsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.clients)) {
            data["clients"] = [];
            for (let item of this.clients)
                data["clients"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IClientsListViewModel {
    clients?: ClientLookupModel[] | undefined;
}

export class ClientLookupModel implements IClientLookupModel {
    id?: string | undefined;
    name?: string | undefined;

    constructor(data?: IClientLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): ClientLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new ClientLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data; 
    }
}

export interface IClientLookupModel {
    id?: string | undefined;
    name?: string | undefined;
}

export class ClientDetailModel implements IClientDetailModel {
    id!: number;
    url?: string | undefined;
    advisorEmail?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;

    constructor(data?: IClientDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.url = data["url"];
            this.advisorEmail = data["advisorEmail"];
            this.name = data["name"];
            this.email = data["email"];
            this.phone = data["phone"];
        }
    }

    static fromJS(data: any): ClientDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["advisorEmail"] = this.advisorEmail;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        return data; 
    }
}

export interface IClientDetailModel {
    id: number;
    url?: string | undefined;
    advisorEmail?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
}

export class Exception implements IException {
    message?: string | undefined;
    innerException?: Exception | undefined;
    stackTrace?: string | undefined;
    source?: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"];
            this.innerException = data["innerException"] ? Exception.fromJS(data["innerException"]) : <any>undefined;
            this.stackTrace = data["stackTrace"];
            this.source = data["source"];
        }
    }

    static fromJS(data: any): Exception {
        data = typeof data === 'object' ? data : {};
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["innerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["stackTrace"] = this.stackTrace;
        data["source"] = this.source;
        return data; 
    }
}

export interface IException {
    message?: string | undefined;
    innerException?: Exception | undefined;
    stackTrace?: string | undefined;
    source?: string | undefined;
}

export class NotFoundException extends Exception implements INotFoundException {

    constructor(data?: INotFoundException) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): NotFoundException {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundException();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface INotFoundException extends IException {
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.type = data["type"];
            this.title = data["title"];
            this.status = data["status"];
            this.detail = data["detail"];
            this.instance = data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data; 
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;
}

export class CreateClientCommand implements ICreateClientCommand {
    id?: string | undefined;
    advisorEmail?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;

    constructor(data?: ICreateClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.advisorEmail = data["advisorEmail"];
            this.name = data["name"];
            this.email = data["email"];
            this.phone = data["phone"];
        }
    }

    static fromJS(data: any): CreateClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["advisorEmail"] = this.advisorEmail;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phone"] = this.phone;
        return data; 
    }
}

export interface ICreateClientCommand {
    id?: string | undefined;
    advisorEmail?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
}

export class RiskProfileDetailModel implements IRiskProfileDetailModel {
    id!: number;
    clientId!: number;
    result?: RiskProfileResultDto | undefined;

    constructor(data?: IRiskProfileDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.clientId = data["clientId"];
            this.result = data["result"] ? RiskProfileResultDto.fromJS(data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RiskProfileDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new RiskProfileDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IRiskProfileDetailModel {
    id: number;
    clientId: number;
    result?: RiskProfileResultDto | undefined;
}

export class RiskProfileResultDto implements IRiskProfileResultDto {
    ccrScore!: number;
    expectedReturn!: number;
    expectedReturn5Yr!: number;
    worstScenarioImpact!: number;
    usePctAllocation?: string | undefined;
    sP500Beta!: number;
    expenseRatio!: number;
    yield!: number;
    analyzableValue!: number;
    value!: number;
    jsonPositions?: RiskProfilePositionDto[] | undefined;

    constructor(data?: IRiskProfileResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ccrScore = data["ccrScore"];
            this.expectedReturn = data["expectedReturn"];
            this.expectedReturn5Yr = data["expectedReturn5Yr"];
            this.worstScenarioImpact = data["worstScenarioImpact"];
            this.usePctAllocation = data["usePctAllocation"];
            this.sP500Beta = data["sP500Beta"];
            this.expenseRatio = data["expenseRatio"];
            this.yield = data["yield"];
            this.analyzableValue = data["analyzableValue"];
            this.value = data["value"];
            if (Array.isArray(data["jsonPositions"])) {
                this.jsonPositions = [] as any;
                for (let item of data["jsonPositions"])
                    this.jsonPositions!.push(RiskProfilePositionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RiskProfileResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new RiskProfileResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ccrScore"] = this.ccrScore;
        data["expectedReturn"] = this.expectedReturn;
        data["expectedReturn5Yr"] = this.expectedReturn5Yr;
        data["worstScenarioImpact"] = this.worstScenarioImpact;
        data["usePctAllocation"] = this.usePctAllocation;
        data["sP500Beta"] = this.sP500Beta;
        data["expenseRatio"] = this.expenseRatio;
        data["yield"] = this.yield;
        data["analyzableValue"] = this.analyzableValue;
        data["value"] = this.value;
        if (Array.isArray(this.jsonPositions)) {
            data["jsonPositions"] = [];
            for (let item of this.jsonPositions)
                data["jsonPositions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRiskProfileResultDto {
    ccrScore: number;
    expectedReturn: number;
    expectedReturn5Yr: number;
    worstScenarioImpact: number;
    usePctAllocation?: string | undefined;
    sP500Beta: number;
    expenseRatio: number;
    yield: number;
    analyzableValue: number;
    value: number;
    jsonPositions?: RiskProfilePositionDto[] | undefined;
}

export class RiskProfilePositionDto implements IRiskProfilePositionDto {
    ticker?: string | undefined;
    quantity!: number;
    marketCap!: number;
    priceDate!: Date;
    industry?: string | undefined;
    volatility!: number;
    mddStart!: Date;
    type?: string | undefined;
    price!: number;
    yield!: number;
    expenseRatio!: number;
    name?: string | undefined;
    pctAllocation!: number;
    mddEnd!: Date;

    constructor(data?: IRiskProfilePositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ticker = data["ticker"];
            this.quantity = data["quantity"];
            this.marketCap = data["marketCap"];
            this.priceDate = data["priceDate"] ? new Date(data["priceDate"].toString()) : <any>undefined;
            this.industry = data["industry"];
            this.volatility = data["volatility"];
            this.mddStart = data["mddStart"] ? new Date(data["mddStart"].toString()) : <any>undefined;
            this.type = data["type"];
            this.price = data["price"];
            this.yield = data["yield"];
            this.expenseRatio = data["expenseRatio"];
            this.name = data["name"];
            this.pctAllocation = data["pctAllocation"];
            this.mddEnd = data["mddEnd"] ? new Date(data["mddEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RiskProfilePositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RiskProfilePositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticker"] = this.ticker;
        data["quantity"] = this.quantity;
        data["marketCap"] = this.marketCap;
        data["priceDate"] = this.priceDate ? this.priceDate.toISOString() : <any>undefined;
        data["industry"] = this.industry;
        data["volatility"] = this.volatility;
        data["mddStart"] = this.mddStart ? this.mddStart.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["price"] = this.price;
        data["yield"] = this.yield;
        data["expenseRatio"] = this.expenseRatio;
        data["name"] = this.name;
        data["pctAllocation"] = this.pctAllocation;
        data["mddEnd"] = this.mddEnd ? this.mddEnd.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IRiskProfilePositionDto {
    ticker?: string | undefined;
    quantity: number;
    marketCap: number;
    priceDate: Date;
    industry?: string | undefined;
    volatility: number;
    mddStart: Date;
    type?: string | undefined;
    price: number;
    yield: number;
    expenseRatio: number;
    name?: string | undefined;
    pctAllocation: number;
    mddEnd: Date;
}

export class CreateRiskProfileForClient implements ICreateRiskProfileForClient {
    clientId!: number;
    positions?: HLPosition[] | undefined;

    constructor(data?: ICreateRiskProfileForClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            if (Array.isArray(data["positions"])) {
                this.positions = [] as any;
                for (let item of data["positions"])
                    this.positions!.push(HLPosition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateRiskProfileForClient {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRiskProfileForClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateRiskProfileForClient {
    clientId: number;
    positions?: HLPosition[] | undefined;
}

export class HLPosition implements IHLPosition {
    ticker?: string | undefined;
    quantity!: number;

    constructor(data?: IHLPosition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ticker = data["ticker"];
            this.quantity = data["quantity"];
        }
    }

    static fromJS(data: any): HLPosition {
        data = typeof data === 'object' ? data : {};
        let result = new HLPosition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticker"] = this.ticker;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IHLPosition {
    ticker?: string | undefined;
    quantity: number;
}

export class StressTestDetailModel implements IStressTestDetailModel {
    id!: number;
    clientId!: number;
    results?: StressTestResultDto[] | undefined;
    ticker?: string | undefined;
    message?: string | undefined;

    constructor(data?: IStressTestDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.clientId = data["clientId"];
            if (Array.isArray(data["results"])) {
                this.results = [] as any;
                for (let item of data["results"])
                    this.results!.push(StressTestResultDto.fromJS(item));
            }
            this.ticker = data["ticker"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): StressTestDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new StressTestDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["ticker"] = this.ticker;
        data["message"] = this.message;
        return data; 
    }
}

export interface IStressTestDetailModel {
    id: number;
    clientId: number;
    results?: StressTestResultDto[] | undefined;
    ticker?: string | undefined;
    message?: string | undefined;
}

export class StressTestResultDto implements IStressTestResultDto {
    name?: string | undefined;
    description?: string | undefined;
    totalImpact!: number;
    positions?: StressTestPositionDto[] | undefined;

    constructor(data?: IStressTestResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.totalImpact = data["totalImpact"];
            if (Array.isArray(data["positions"])) {
                this.positions = [] as any;
                for (let item of data["positions"])
                    this.positions!.push(StressTestPositionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): StressTestResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new StressTestResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["totalImpact"] = this.totalImpact;
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IStressTestResultDto {
    name?: string | undefined;
    description?: string | undefined;
    totalImpact: number;
    positions?: StressTestPositionDto[] | undefined;
}

export class StressTestPositionDto implements IStressTestPositionDto {
    ticker?: string | undefined;
    quantity!: number;
    impactPct!: number;

    constructor(data?: IStressTestPositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ticker = data["ticker"];
            this.quantity = data["quantity"];
            this.impactPct = data["impactPct"];
        }
    }

    static fromJS(data: any): StressTestPositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new StressTestPositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticker"] = this.ticker;
        data["quantity"] = this.quantity;
        data["impactPct"] = this.impactPct;
        return data; 
    }
}

export interface IStressTestPositionDto {
    ticker?: string | undefined;
    quantity: number;
    impactPct: number;
}

export class CreateStressTestForClient implements ICreateStressTestForClient {
    clientId!: number;
    positions?: HLPosition[] | undefined;

    constructor(data?: ICreateStressTestForClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientId = data["clientId"];
            if (Array.isArray(data["positions"])) {
                this.positions = [] as any;
                for (let item of data["positions"])
                    this.positions!.push(HLPosition.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateStressTestForClient {
        data = typeof data === 'object' ? data : {};
        let result = new CreateStressTestForClient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        if (Array.isArray(this.positions)) {
            data["positions"] = [];
            for (let item of this.positions)
                data["positions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateStressTestForClient {
    clientId: number;
    positions?: HLPosition[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}